From 651c4234bece5d00979dea0a5e943842fa89f33b Mon Sep 17 00:00:00 2001
From: jbuly4 <jbuly4@jbuly4.jbuly4>
Date: Tue, 17 Oct 2023 22:12:11 +0300
Subject: [PATCH] added until + update_file.py

---
 Grammar/Grammar              |  3 ++-
 Parser/Python.asdl           |  1 +
 Python/ast.c                 | 27 +++++++++++++++++++++++
 Python/compile.c             | 42 ++++++++++++++++++++++++++++++++++++
 Python/symtable.c            |  4 ++++
 Tools/scripts/update_file.py |  4 +++-
 6 files changed, 79 insertions(+), 2 deletions(-)

diff --git a/Grammar/Grammar b/Grammar/Grammar
index 7d3dd0b86d..7f1d7999aa 100644
--- a/Grammar/Grammar
+++ b/Grammar/Grammar
@@ -67,10 +67,11 @@ global_stmt: 'global' NAME (',' NAME)*
 nonlocal_stmt: 'nonlocal' NAME (',' NAME)*
 assert_stmt: 'assert' test [',' test]
 
-compound_stmt: if_stmt | while_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef | decorated | async_stmt
+compound_stmt: if_stmt | while_stmt | until_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef | decorated | async_stmt
 async_stmt: 'async' (funcdef | with_stmt | for_stmt)
 if_stmt: 'if' test ':' suite ('elif' test ':' suite)* ['else' ':' suite]
 while_stmt: 'while' test ':' suite ['else' ':' suite]
+until_stmt: 'until' test ':' suite
 for_stmt: 'for' exprlist 'in' testlist ':' suite ['else' ':' suite]
 try_stmt: ('try' ':' suite
            ((except_clause ':' suite)+
diff --git a/Parser/Python.asdl b/Parser/Python.asdl
index f470ad13b6..410c93e6ab 100644
--- a/Parser/Python.asdl
+++ b/Parser/Python.asdl
@@ -35,6 +35,7 @@ module Python
           | For(expr target, expr iter, stmt* body, stmt* orelse)
           | AsyncFor(expr target, expr iter, stmt* body, stmt* orelse)
           | While(expr test, stmt* body, stmt* orelse)
+          | Until(expr test, stmt* body)
           | If(expr test, stmt* body, stmt* orelse)
           | With(withitem* items, stmt* body)
           | AsyncWith(withitem* items, stmt* body)
diff --git a/Python/ast.c b/Python/ast.c
index d67e2b207a..4cdb2fb796 100644
--- a/Python/ast.c
+++ b/Python/ast.c
@@ -3711,6 +3711,31 @@ ast_for_while_stmt(struct compiling *c, const node *n)
     return NULL;
 }
 
+static stmt_ty
+ast_for_until_stmt(struct compiling *c, const node *n)
+{
+    /* until_stmt: 'until' test ':' suite */
+    REQ(n, until_stmt);
+
+    if (NCH(n) == 4) {
+        expr_ty expression;
+        asdl_seq *suite_seq;
+
+        expression = ast_for_expr(c, CHILD(n, 1));
+        if (!expression)
+            return NULL;
+        suite_seq = ast_for_suite(c, CHILD(n, 3));
+        if (!suite_seq)
+            return NULL;
+        return Until(expression, suite_seq, LINENO(n), n->n_col_offset, c->c_arena);
+    }
+
+    PyErr_Format(PyExc_SystemError,
+                 "wrong number of tokens for 'until' statement: %d",
+                 NCH(n));
+    return NULL;
+}
+
 static stmt_ty
 ast_for_for_stmt(struct compiling *c, const node *n0, bool is_async)
 {
@@ -4043,6 +4068,8 @@ ast_for_stmt(struct compiling *c, const node *n)
                 return ast_for_if_stmt(c, ch);
             case while_stmt:
                 return ast_for_while_stmt(c, ch);
+            case until_stmt:
+                return ast_for_until_stmt(c, ch);
             case for_stmt:
                 return ast_for_for_stmt(c, ch, 0);
             case try_stmt:
diff --git a/Python/compile.c b/Python/compile.c
index 32884be34d..b416e86f20 100644
--- a/Python/compile.c
+++ b/Python/compile.c
@@ -2493,6 +2493,46 @@ compiler_while(struct compiler *c, stmt_ty s)
     return 1;
 }
 
+static int
+compiler_until(struct compiler *c, stmt_ty s)
+{
+    basicblock *loop, *end, *anchor = NULL;
+    int constant = expr_constant(s->v.Until.test);
+
+    if (constant == 1) {
+        return 1;
+    }
+    loop = compiler_new_block(c);
+    end = compiler_new_block(c);
+    if (constant == -1) {
+        anchor = compiler_new_block(c);
+        if (anchor == NULL)
+            return 0;
+    }
+    if (loop == NULL || end == NULL)
+        return 0;
+
+    ADDOP_JREL(c, SETUP_LOOP, end);
+    compiler_use_next_block(c, loop);
+    if (!compiler_push_fblock(c, LOOP, loop))
+        return 0;
+    if (constant == -1) {
+        VISIT(c, expr, s->v.Until.test);
+        ADDOP_JABS(c, POP_JUMP_IF_TRUE, anchor);
+    }
+    VISIT_SEQ(c, stmt, s->v.Until.body);
+    ADDOP_JABS(c, JUMP_ABSOLUTE, loop);
+
+    if (constant == -1) {
+        compiler_use_next_block(c, anchor);
+        ADDOP(c, POP_BLOCK);
+    }
+    compiler_pop_fblock(c, LOOP, loop);
+    compiler_use_next_block(c, end);
+
+    return 1;
+}
+
 static int
 compiler_continue(struct compiler *c)
 {
@@ -3015,6 +3055,8 @@ compiler_visit_stmt(struct compiler *c, stmt_ty s)
         return compiler_for(c, s);
     case While_kind:
         return compiler_while(c, s);
+    case Until_kind:
+        return compiler_until(c, s);
     case If_kind:
         return compiler_if(c, s);
     case Raise_kind:
diff --git a/Python/symtable.c b/Python/symtable.c
index 177bb6d436..0978eff87c 100644
--- a/Python/symtable.c
+++ b/Python/symtable.c
@@ -1223,6 +1223,10 @@ symtable_visit_stmt(struct symtable *st, stmt_ty s)
         if (s->v.While.orelse)
             VISIT_SEQ(st, stmt, s->v.While.orelse);
         break;
+    case Until_kind:
+        VISIT(st, expr, s->v.Until.test);
+        VISIT_SEQ(st, stmt, s->v.Until.body);
+        break;
     case If_kind:
         /* XXX if 0: and lookup_yield() hacks */
         VISIT(st, expr, s->v.If.test);
diff --git a/Tools/scripts/update_file.py b/Tools/scripts/update_file.py
index 224585c69b..d0bdac6070 100644
--- a/Tools/scripts/update_file.py
+++ b/Tools/scripts/update_file.py
@@ -16,7 +16,9 @@ def main(old_path, new_path):
     with open(new_path, 'rb') as f:
         new_contents = f.read()
     if old_contents != new_contents:
-        os.replace(new_path, old_path)
+        # os.replace(new_path, old_path)
+        os.remove(old_path)
+        os.rename(new_path, old_path)
     else:
         os.unlink(new_path)
 
-- 
2.39.3 (Apple Git-145)

